<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</title>
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 6px 20px rgba(0,0,0,0.08);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.15);
        }

        .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .card-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .card-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: #333;
        }

        .upload-area {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: border-color 0.3s ease;
            margin-bottom: 20px;
        }

        .upload-area:hover {
            border-color: #667eea;
        }

        .upload-icon {
            font-size: 3rem;
            color: #667eea;
            margin-bottom: 15px;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: opacity 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn:hover {
            opacity: 0.9;
        }

        .btn-export {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        }

        .table-container {
            overflow-x: auto;
            margin-top: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #555;
        }

        tr:hover {
            background-color: #f8f9ff;
        }

        .chart-container {
            height: 300px;
            margin-top: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #555;
        }

        select, input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 1rem;
        }

        .export-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stats-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .hidden {
            display: none;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #667eea;
        }

        .error {
            color: #e74c3c;
            background-color: #fdf2f2;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
            border-left: 4px solid #e74c3c;
        }

        .success {
            color: #27ae60;
            background-color: #f2fdf2;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
            border-left: 4px solid #27ae60;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üìä Dashboard ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</h1>
            <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤</p>
        </header>

        <div class="dashboard-grid">
            <!-- ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">1</div>
                    <h2 class="card-title">‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h2>
                </div>
                
                <div class="upload-area" id="leaveUploadArea">
                    <div class="upload-icon">üìÅ</div>
                    <h3>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏±‡∏ô‡∏•‡∏≤</h3>
                    <p>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel (.xlsx)</p>
                    <input type="file" id="leaveFile" accept=".csv,.xlsx" style="display: none;">
                    <button class="btn" onclick="document.getElementById('leaveFile').click()">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå</button>
                </div>

                <div class="form-group">
                    <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:</label>
                    <select id="quarterSelect1">
                        <option value="Q1">Q1 (‡∏°.‡∏Ñ. - ‡∏°‡∏µ.‡∏Ñ.)</option>
                        <option value="Q2">Q2 (‡πÄ‡∏°.‡∏¢. - ‡∏°‡∏¥.‡∏¢.)</option>
                        <option value="Q3">Q3 (‡∏Å.‡∏Ñ. - ‡∏Å.‡∏¢.)</option>
                        <option value="Q4">Q4 (‡∏ï.‡∏Ñ. - ‡∏ò.‡∏Ñ.)</option>
                    </select>
                </div>

                <div id="leaveResults" class="hidden">
                    <h3>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</h3>
                    <div class="table-container">
                        <table id="leaveTable">
                            <thead>
                                <tr>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
                                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤</th>
                                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>

                <div id="leaveMessage"></div>
            </div>

            <!-- ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">2</div>
                    <h2 class="card-title">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤</h2>
                </div>
                
                <div class="upload-area" id="inspectionUploadArea">
                    <div class="upload-icon">üè¢</div>
                    <h3>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≤‡∏Ç‡∏≤</h3>
                    <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤</p>
                    <input type="file" id="inspectionFile" accept=".csv,.xlsx" style="display: none;">
                    <button class="btn" onclick="document.getElementById('inspectionFile').click()">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå</button>
                </div>

                <div class="form-group">
                    <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à:</label>
                    <select id="levelSelect">
                        <option value="all">‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö</option>
                        <option value="4">‡∏£‡∏∞‡∏î‡∏±‡∏ö 4</option>
                        <option value="3">‡∏£‡∏∞‡∏î‡∏±‡∏ö 3</option>
                        <option value="2">‡∏£‡∏∞‡∏î‡∏±‡∏ö 2</option>
                        <option value="1">‡∏£‡∏∞‡∏î‡∏±‡∏ö 1</option>
                    </select>
                </div>

                <div id="inspectionResults" class="hidden">
                    <h3>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</h3>
                    <div class="table-container">
                        <table id="inspectionTable">
                            <thead>
                                <tr>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
                                    <th>‡∏™‡∏≤‡∏Ç‡∏≤</th>
                                    <th>‡∏£‡∏∞‡∏î‡∏±‡∏ö</th>
                                    <th>Onsite (%)</th>
                                    <th>Remote (%)</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>

                <div id="inspectionMessage"></div>
            </div>

            <!-- ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏° -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">3</div>
                    <h2 class="card-title">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°</h2>
                </div>
                
                <div class="stats-summary">
                    <div class="stat-card">
                        <div class="stat-number" id="totalWorkDays">0</div>
                        <div class="stat-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="totalInspectionDays">0</div>
                        <div class="stat-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="totalEmployees">0</div>
                        <div class="stat-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</div>
                    </div>
                </div>

                <div class="chart-container">
                    <canvas id="summaryChart"></canvas>
                </div>

                <div class="table-container">
                    <table id="summaryTable">
                        <thead>
                            <tr>
                                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
                                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Q)</th>
                                <th>‡∏ï‡∏£‡∏ß‡∏à Onsite</th>
                                <th>‡∏ï‡∏£‡∏ß‡∏à Remote</th>
                                <th>‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>

            <!-- ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 4: Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">4</div>
                    <h2 class="card-title">Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
                </div>
                
                <div class="form-group">
                    <label>‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå:</label>
                    <select id="exportFormat">
                        <option value="xlsx">Excel (.xlsx)</option>
                        <option value="csv">CSV</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:</label>
                    <select id="exportQuarter">
                        <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                        <option value="Q1">Q1 (‡∏°.‡∏Ñ. - ‡∏°‡∏µ.‡∏Ñ.)</option>
                        <option value="Q2">Q2 (‡πÄ‡∏°.‡∏¢. - ‡∏°‡∏¥.‡∏¢.)</option>
                        <option value="Q3">Q3 (‡∏Å.‡∏Ñ. - ‡∏Å.‡∏¢.)</option>
                        <option value="Q4">Q4 (‡∏ï.‡∏Ñ. - ‡∏ò.‡∏Ñ.)</option>
                    </select>
                </div>

                <div class="export-options">
                    <button class="btn btn-export" onclick="exportData('all')">
                        üì• Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    </button>
                    <button class="btn btn-export" onclick="exportData('individual')">
                        üë§ Export ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
                    </button>
                </div>

                <div class="form-group" style="margin-top: 20px;">
                    <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•):</label>
                    <select id="employeeSelect">
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...</option>
                    </select>
                </div>

                <div id="exportMessage"></div>
            </div>
        </div>
    </div>

    <script>
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        let leaveData = [];
        let inspectionData = [];
        let summaryChart = null;

        // Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        document.getElementById('leaveFile').addEventListener('change', function(e) {
            handleFileUpload(e, 'leave');
        });

        document.getElementById('inspectionFile').addEventListener('change', function(e) {
            handleFileUpload(e, 'inspection');
        });

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        function handleFileUpload(event, type) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, {type: 'array'});
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(firstSheet);

                    if (type === 'leave') {
                        processLeaveData(jsonData);
                    } else {
                        processInspectionData(jsonData);
                    }
                } catch (error) {
                    showMessage(type, `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: ${error.message}`, 'error');
                }
            };
            reader.readAsArrayBuffer(file);
        }

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏≤
        function processLeaveData(data) {
            leaveData = data.map(row => ({
                name: row['‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'] || row['Name'] || row['A'] || '',
                leaveDate: row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤'] || row['Leave Date'] || row['B'] || ''
            }));

            // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏•‡∏≤
            leaveData = leaveData.filter(item => item.name && item.leaveDate);

            displayLeaveResults();
            showMessage('leave', '‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
        function processInspectionData(data) {
            inspectionData = data.map(row => ({
                name: row['‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'] || row['Name'] || row['A'] || '',
                branch: row['‡∏™‡∏≤‡∏Ç‡∏≤'] || row['Branch'] || row['B'] || '',
                level: parseInt(row['‡∏£‡∏∞‡∏î‡∏±‡∏ö'] || row['Level'] || row['C'] || '0')
            }));

            // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
            inspectionData = inspectionData.filter(item => item.name && item.level > 0);

            displayInspectionResults();
            updateEmployeeSelect();
            showMessage('inspection', '‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡∏±‡∏ô‡∏•‡∏≤
        function displayLeaveResults() {
            const tbody = document.querySelector('#leaveTable tbody');
            tbody.innerHTML = '';

            // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            const groupedData = {};
            leaveData.forEach(item => {
                if (!groupedData[item.name]) {
                    groupedData[item.name] = [];
                }
                groupedData[item.name].push(item.leaveDate);
            });

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏™‡∏°‡∏°‡∏ï‡∏¥ 65 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™)
            Object.keys(groupedData).forEach(name => {
                const leaveCount = groupedData[name].length;
                const workDays = Math.max(0, 65 - leaveCount);
                
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${name}</td>
                    <td>${leaveCount}</td>
                    <td>${workDays}</td>
                `;
            });

            document.getElementById('leaveResults').classList.remove('hidden');
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
        function displayInspectionResults() {
            const tbody = document.querySelector('#inspectionTable tbody');
            tbody.innerHTML = '';

            const levelFilter = document.getElementById('levelSelect').value;
            
            inspectionData.forEach(item => {
                if (levelFilter !== 'all' && item.level.toString() !== levelFilter) {
                    return;
                }

                let onsitePercent, remotePercent;
                switch(item.level) {
                    case 4:
                    case 3:
                        onsitePercent = 100;
                        remotePercent = 0;
                        break;
                    case 2:
                        onsitePercent = 70;
                        remotePercent = 30;
                        break;
                    case 1:
                        onsitePercent = 50;
                        remotePercent = 50;
                        break;
                    default:
                        onsitePercent = 0;
                        remotePercent = 0;
                }

                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${item.name}</td>
                    <td>${item.branch}</td>
                    <td>${item.level}</td>
                    <td>${onsitePercent}%</td>
                    <td>${remotePercent}%</td>
                `;
            });

            document.getElementById('inspectionResults').classList.remove('hidden');
            updateSummary();
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        function updateEmployeeSelect() {
            const select = document.getElementById('employeeSelect');
            const employees = [...new Set([...leaveData.map(d => d.name), ...inspectionData.map(d => d.name)])];
            
            select.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...</option>';
            employees.forEach(emp => {
                const option = document.createElement('option');
                option.value = emp;
                option.textContent = emp;
                select.appendChild(option);
            });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        function updateSummary() {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            const totalEmployees = new Set([...leaveData.map(d => d.name), ...inspectionData.map(d => d.name)]).size;
            const totalWorkDays = leaveData.length > 0 ? (65 * totalEmployees - leaveData.length) : 0;
            const totalInspectionDays = inspectionData.length * 5; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ 5 ‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤

            document.getElementById('totalWorkDays').textContent = totalWorkDays;
            document.getElementById('totalInspectionDays').textContent = totalInspectionDays;
            document.getElementById('totalEmployees').textContent = totalEmployees;

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
            const tbody = document.querySelector('#summaryTable tbody');
            tbody.innerHTML = '';

            const employees = [...new Set([...leaveData.map(d => d.name), ...inspectionData.map(d => d.name)])];
            
            employees.forEach(emp => {
                const leaveCount = leaveData.filter(d => d.name === emp).length;
                const workDays = Math.max(0, 65 - leaveCount);
                const inspectionCount = inspectionData.filter(d => d.name === emp).length;
                const onsiteDays = Math.round(inspectionCount * 0.7); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                const remoteDays = inspectionCount - onsiteDays;
                const totalInspection = onsiteDays + remoteDays;

                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${emp}</td>
                    <td>${workDays}</td>
                    <td>${onsiteDays}</td>
                    <td>${remoteDays}</td>
                    <td>${totalInspection}</td>
                `;
            });

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
            createSummaryChart();
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ
        function createSummaryChart() {
            const ctx = document.getElementById('summaryChart').getContext('2d');
            
            if (summaryChart) {
                summaryChart.destroy();
            }

            summaryChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à'],
                    datasets: [{
                        label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô',
                        data: [
                            parseInt(document.getElementById('totalWorkDays').textContent),
                            parseInt(document.getElementById('totalInspectionDays').textContent)
                        ],
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.6)',
                            'rgba(255, 99, 132, 0.6)'
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 99, 132, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        function exportData(type) {
            const format = document.getElementById('exportFormat').value;
            const quarter = document.getElementById('exportQuarter').value;
            const employee = document.getElementById('employeeSelect').value;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
            const exportData = [];
            
            if (type === 'all' || (type === 'individual' && employee)) {
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏≤
                exportData.push(['=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏≤ ===']);
                exportData.push(['‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤']);
                leaveData.forEach(item => {
                    if (type === 'all' || item.name === employee) {
                        exportData.push([item.name, item.leaveDate]);
                    }
                });

                exportData.push([]); // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
                exportData.push(['=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à ===']);
                exportData.push(['‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡∏™‡∏≤‡∏Ç‡∏≤', '‡∏£‡∏∞‡∏î‡∏±‡∏ö', 'Onsite %', 'Remote %']);
                inspectionData.forEach(item => {
                    if (type === 'all' || item.name === employee) {
                        let onsitePercent, remotePercent;
                        switch(item.level) {
                            case 4: case 3: onsitePercent = 100; remotePercent = 0; break;
                            case 2: onsitePercent = 70; remotePercent = 30; break;
                            case 1: onsitePercent = 50; remotePercent = 50; break;
                            default: onsitePercent = 0; remotePercent = 0;
                        }
                        exportData.push([item.name, item.branch, item.level, onsitePercent, remotePercent]);
                    }
                });

                exportData.push([]); // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
                exportData.push(['=== ‡∏™‡∏£‡∏∏‡∏õ ===']);
                exportData.push(['‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏ï‡∏£‡∏ß‡∏à Onsite', '‡∏ï‡∏£‡∏ß‡∏à Remote', '‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à']);
                
                const employees = type === 'all' ? 
                    [...new Set([...leaveData.map(d => d.name), ...inspectionData.map(d => d.name)])] :
                    [employee];

                employees.forEach(emp => {
                    const leaveCount = leaveData.filter(d => d.name === emp).length;
                    const workDays = Math.max(0, 65 - leaveCount);
                    const inspectionCount = inspectionData.filter(d => d.name === emp).length;
                    const onsiteDays = Math.round(inspectionCount * 0.7);
                    const remoteDays = inspectionCount - onsiteDays;
                    const totalInspection = onsiteDays + remoteDays;

                    exportData.push([emp, workDays, onsiteDays, remoteDays, totalInspection]);
                });
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
            if (format === 'xlsx') {
                const ws = XLSX.utils.aoa_to_sheet(exportData);
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô");
                XLSX.writeFile(wb, `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô_${type}_${new Date().toISOString().split('T')[0]}.xlsx`);
            } else {
                let csvContent = "";
                exportData.forEach(row => {
                    csvContent += row.join(",") + "\n";
                });
                
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement("a");
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô_${type}_${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            showMessage('export', `‚úÖ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${type === 'all' ? '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' : '‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        function showMessage(type, message, className) {
            const messageDiv = document.getElementById(`${type}Message`) || document.getElementById('exportMessage');
            messageDiv.innerHTML = `<div class="${className}">${message}</div>`;
            
            setTimeout(() => {
                messageDiv.innerHTML = '';
            }, 5000);
        }

        // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown
        document.getElementById('levelSelect').addEventListener('change', displayInspectionResults);
        document.getElementById('quarterSelect1').addEventListener('change', displayLeaveResults);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        window.addEventListener('load', function() {
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á
            leaveData = [
                {name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', leaveDate: '2024-01-15'},
                {name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', leaveDate: '2024-02-20'},
                {name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏à‡∏±‡∏á', leaveDate: '2024-01-10'},
                {name: '‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏™‡∏∏‡∏Ç‡∏™‡∏ö‡∏≤‡∏¢', leaveDate: '2024-03-05'},
                {name: '‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏™‡∏∏‡∏Ç‡∏™‡∏ö‡∏≤‡∏¢', leaveDate: '2024-03-12'}
            ];

            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≥‡∏•‡∏≠‡∏á
            inspectionData = [
                {name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', branch: '‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏Å‡∏ó‡∏°.', level: 3},
                {name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏à‡∏±‡∏á', branch: '‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', level: 2},
                {name: '‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏™‡∏∏‡∏Ç‡∏™‡∏ö‡∏≤‡∏¢', branch: '‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', level: 1},
                {name: '‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏£‡∏ß‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', branch: '‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', level: 4}
            ];

            displayLeaveResults();
            displayInspectionResults();
            updateEmployeeSelect();
            updateSummary();
        });
    </script>
</body>
</html>
