üìÇ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (React)
my-dashboard/
‚îÇ  package.json
‚îÇ  vite.config.js (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Vite)
‚îÇ
‚îî‚îÄ‚îÄ src/
    ‚îÇ  main.jsx
    ‚îÇ  App.jsx
    ‚îÇ  index.css
    ‚îÇ
    ‚îú‚îÄ‚îÄ components/
    ‚îÇ     UploadLeaveFile.jsx
    ‚îÇ     UploadBranchFile.jsx
    ‚îÇ     SummaryTable.jsx
    ‚îÇ     ExportControls.jsx
    ‚îÇ
    ‚îî‚îÄ‚îÄ utils/
          calculateInspection.js

package.json
{
  "name": "onsite-remote-dashboard",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "xlsx": "^0.18.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "vite": "^4.0.0"
  }
}

vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
});

src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

src/index.css
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background: #f5f5f5;
}
.dashboard {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: auto auto;
  gap: 16px;
  padding: 16px;
}
.box {
  background: white;
  border-radius: 8px;
  padding: 16px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  overflow: auto;
}
h2 {
  margin-top: 0;
}
table {
  width: 100%;
  border-collapse: collapse;
}
table, th, td {
  border: 1px solid #ddd;
}
th, td {
  padding: 8px;
  text-align: left;
}
.btn {
  display: inline-block;
  margin: 4px;
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.btn:hover {
  background-color: #0056b3;
}
.upload-section {
  margin-bottom: 12px;
}

src/utils/calculateInspection.js
// ‡πÇ‡∏ã‡∏ô (‡∏†‡∏≤‡∏Ñ) ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô
const REGIONS = ['‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏Å‡∏•‡∏≤‡∏á', '‡∏≠‡∏µ‡∏™‡∏≤‡∏ô', '‡πÉ‡∏ï‡πâ'];

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ï‡∏£‡∏ß‡∏à Onsite ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
 * @param {Array} employees ‚Äî list ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô [{ name, ... }]
 * @param {number} months ‚Äî ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î (default 3)
 * @returns {Object} assignments: { [name]: [{ month, region, type: 'Onsite' }, ...], ... }
 */
export function getUniqueRegionAssignments(employees, months = 3) {
  const assignments = {};

  employees.forEach(emp => {
    const name = emp.name;
    assignments[name] = [];

    // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ local ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏Ñ
    let usedRegions = new Set();

    for (let m = 0; m < months; m++) {
      // ‡∏´‡∏≤‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
      const available = REGIONS.filter(r => !usedRegions.has(r));
      if (available.length === 0) {
        // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ä‡∏∏‡∏î‡∏†‡∏≤‡∏Ñ
        usedRegions.clear();
        available.push(...REGIONS);
      }
      // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      const idx = Math.floor(Math.random() * available.length);
      const assignedRegion = available[idx];

      assignments[name].push({
        month: m + 1,
        region: assignedRegion,
        type: 'Onsite'
      });

      usedRegions.add(assignedRegion);
    }
  });

  return assignments;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏£‡∏ß‡∏à Remote ‚Äî ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ Remote ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
 * @param {Array} employees ‚Äî list ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
 * @param {number} months
 * @returns {Object} assignments remote
 */
export function getRemoteAssignments(employees, months = 3) {
  const assignments = {};

  employees.forEach(emp => {
    const name = emp.name;
    assignments[name] = [];

    for (let m = 0; m < months; m++) {
      assignments[name].push({
        month: m + 1,
        region: '‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏Ñ',
        type: 'Remote'
      });
    }
  });

  return assignments;
}

src/components/UploadLeaveFile.jsx
import React from 'react';
import * as XLSX from 'xlsx';

const UploadLeaveFile = ({ onDataLoaded }) => {
  const handleFile = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (evt) => {
      const data = new Uint8Array(evt.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô object
      const leaveData = {}; // { name: [dates...] }
      rows.slice(1).forEach(row => {
        const name = row[0];
        const date = row[1];
        if (!name) return;
        if (!leaveData[name]) leaveData[name] = [];
        leaveData[name].push(date);
      });

      onDataLoaded(leaveData);
    };
    reader.readAsArrayBuffer(file);
  };

  return (
    <div className="upload-section">
      <input type="file" accept=".xlsx, .xls" onChange={handleFile} />
    </div>
  );
};

export default UploadLeaveFile;

src/components/UploadBranchFile.jsx
import React from 'react';
import * as XLSX from 'xlsx';

const UploadBranchFile = ({ onDataLoaded }) => {
  const handleFile = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (evt) => {
      const data = new Uint8Array(evt.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const branchData = []; // list of { name, branch, level }
      rows.slice(1).forEach(row => {
        const name = row[0];
        const branch = row[1];
        const level = row[2];
        if (!name) return;
        branchData.push({ name, branch, level });
      });

      onDataLoaded(branchData);
    };
    reader.readAsArrayBuffer(file);
  };

  return (
    <div className="upload-section">
      <input type="file" accept=".xlsx, .xls" onChange={handleFile} />
    </div>
  );
};

export default UploadBranchFile;

src/components/SummaryTable.jsx
import React from 'react';

const SummaryTable = ({ summary }) => {
  return (
    <table>
      <thead>
        <tr>
          <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
          <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (Q)</th>
          <th>‡∏ï‡∏£‡∏ß‡∏à Onsite</th>
          <th>‡∏ï‡∏£‡∏ß‡∏à Remote</th>
        </tr>
      </thead>
      <tbody>
        {Object.entries(summary).map(([name, obj]) => (
          <tr key={name}>
            <td>{name}</td>
            <td>{obj.workdays}</td>
            <td>
              {obj.inspection?.filter(i => i.type === 'Onsite')
                .map(i => `‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${i.month}(${i.region})`)
                .join(', ')}
            </td>
            <td>
              {obj.inspection?.filter(i => i.type === 'Remote')
                .map(i => `‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${i.month}`)
                .join(', ')}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default SummaryTable;

src/components/ExportControls.jsx
import React from 'react';
import * as XLSX from 'xlsx';

const ExportControls = ({ summary }) => {
  const exportAll = () => {
    const allRows = [];

    Object.entries(summary).forEach(([name, obj]) => {
      obj.inspection.forEach(item => {
        allRows.push({
          name,
          month: item.month,
          type: item.type,
          region: item.region || '',
          workdays: obj.workdays
        });
      });
    });

    const ws = XLSX.utils.json_to_sheet(allRows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Summary');
    XLSX.writeFile(wb, `report_all.xlsx`);
  };

  const exportIndividual = () => {
    Object.entries(summary).forEach(([name, obj]) => {
      const rows = obj.inspection.map(item => ({
        name,
        month: item.month,
        type: item.type,
        region: item.region || '',
        workdays: obj.workdays
      }));
      const ws = XLSX.utils.json_to_sheet(rows);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, name);
      XLSX.writeFile(wb, `report_${name}.xlsx`);
    });
  };

  return (
    <div>
      <button className="btn" onClick={exportAll}>Export ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
      <button className="btn" onClick={exportIndividual}>Export ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</button>
    </div>
  );
};

export default ExportControls;

src/App.jsx
import React, { useState, useEffect } from 'react';
import UploadLeaveFile from './components/UploadLeaveFile';
import UploadBranchFile from './components/UploadBranchFile';
import SummaryTable from './components/SummaryTable';
import ExportControls from './components/ExportControls';
import {
  getUniqueRegionAssignments,
  getRemoteAssignments
} from './utils/calculateInspection';

function App() {
  const [leaveData, setLeaveData] = useState(null); 
  const [branchData, setBranchData] = useState(null);
  const [summary, setSummary] = useState({});

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ leaveData ‡∏´‡∏£‡∏∑‡∏≠ branchData ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô => ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì summary ‡πÉ‡∏´‡∏°‡πà
  useEffect(() => {
    if (!leaveData || !branchData) return;

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° list ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const employees = branchData.map(b => ({ name: b.name }));

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Onsite ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏Ñ
    const onsiteAssign = getUniqueRegionAssignments(employees, 3);
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Remote
    const remoteAssign = getRemoteAssignments(employees, 3);

    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô summary
    const newSummary = {};

    employees.forEach(emp => {
      const name = emp.name;
      const workdays = 66; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Q (‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏£‡∏¥‡∏á)
      newSummary[name] = {
        workdays,
        inspection: [
          ...(onsiteAssign[name] || []),
          ...(remoteAssign[name] || [])
        ]
      };
    });

    setSummary(newSummary);

  }, [leaveData, branchData]);

  return (
    <div className="dashboard">
      <div className="box">
        <h2>1. ‡∏ß‡∏±‡∏ô‡∏•‡∏≤ / ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h2>
        <UploadLeaveFile onDataLoaded={setLeaveData} />
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° table ‡πÅ‡∏™‡∏î‡∏á leaveData ‡πÅ‡∏•‡∏∞ workdays ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
      </div>

      <div className="box">
        <h2>2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ / ‡∏£‡∏∞‡∏î‡∏±‡∏ö</h2>
        <UploadBranchFile onDataLoaded={setBranchData} />
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° table ‡πÅ‡∏™‡∏î‡∏á branchData ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
      </div>

      <div className="box">
        <h2>3. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•</h2>
        <SummaryTable summary={summary} />
      </div>

      <div className="box">
        <h2>4. Export</h2>
        <ExportControls summary={summary} />
      </div>
    </div>
  );
}

export default App;

‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô npm create vite@latest onsite-remote-dashboard --template react)

‡πÅ‡∏ó‡∏£‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå src/ (‡πÅ‡∏•‡∏∞ config ‡∏ï‡πà‡∏≤‡∏á ‡πÜ)

‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies: npm install xlsx react react-dom

‡∏£‡∏±‡∏ô npm run dev

‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏≤ / ‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå + Export